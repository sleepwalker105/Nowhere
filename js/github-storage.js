// GitHub Storage System –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
class GitHubStorage {
    constructor() {
        this.config = {
            owner: 'sleepwalker105',
            repo: 'Nowhere',
            branch: 'main',
            // –í–ê–ñ–ù–û: –•—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ GitHub Actions
            // –î–ª—è –¥–µ–º–æ - –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –∑–¥–µ—Å—å (–Ω–æ —ç—Ç–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
            token: '–í–ê–®_GITHUB_TOKEN_–ó–î–ï–°–¨' 
        };
        this.baseUrl = `https://api.github.com/repos/${this.config.owner}/${this.config.repo}/contents`;
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ GitHub
    async uploadImage(file, filename) {
        try {
            const base64Content = await this.fileToBase64(file);
            const path = `images/projects/${filename}`;
            
            const response = await fetch(`${this.baseUrl}/${path}`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${this.config.token}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: `Add project image: ${filename}`,
                    content: base64Content.split(',')[1], // —É–±–∏—Ä–∞–µ–º data:image prefix
                    branch: this.config.branch
                })
            });

            if (response.ok) {
                const data = await response.json();
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                return `https://raw.githubusercontent.com/${this.config.owner}/${this.config.repo}/${this.config.branch}/images/projects/${filename}`;
            } else {
                throw new Error(`GitHub API error: ${response.status}`);
            }
        } catch (error) {
            console.error('Image upload failed:', error);
            return null;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –≤ JSON —Ñ–∞–π–ª
    async saveProjects(projects) {
        try {
            const content = JSON.stringify(projects, null, 2);
            const base64Content = btoa(unescape(encodeURIComponent(content)));
            
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º SHA —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            let sha = null;
            try {
                const existingFile = await fetch(`${this.baseUrl}/data/projects.json`, {
                    headers: {
                        'Authorization': `Bearer ${this.config.token}`
                    }
                });
                if (existingFile.ok) {
                    const existingData = await existingFile.json();
                    sha = existingData.sha;
                }
            } catch (e) {
                // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            }

            const body = {
                message: `Update projects data - ${new Date().toISOString()}`,
                content: base64Content,
                branch: this.config.branch
            };

            if (sha) {
                body.sha = sha; // –ù—É–∂–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
            }

            const response = await fetch(`${this.baseUrl}/data/projects.json`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${this.config.token}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body)
            });

            return response.ok;
        } catch (error) {
            console.error('Projects save failed:', error);
            return false;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ GitHub
    async loadProjects() {
        try {
            const response = await fetch(`https://raw.githubusercontent.com/${this.config.owner}/${this.config.repo}/${this.config.branch}/data/projects.json`);
            
            if (response.ok) {
                const projects = await response.json();
                return projects;
            } else {
                console.log('No projects file found, starting with empty array');
                return [];
            }
        } catch (error) {
            console.error('Projects load failed:', error);
            return [];
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –≤ base64
    fileToBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result);
            reader.onerror = error => reject(error);
        });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    generateFilename(originalName) {
        const timestamp = Date.now();
        const extension = originalName.split('.').pop().toLowerCase();
        const randomId = Math.random().toString(36).substr(2, 9);
        return `project-${timestamp}-${randomId}.${extension}`;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.githubStorage = new GitHubStorage();

console.log('GitHub Storage initialized! üêô');